package com.example.nesadimsergej.test;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Loyalty extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5060008054600160a060020a031916331781556004805467ffffffffffffffff191690556006556155b0806100466000396000f300608060405260043610620001795763ffffffff60e060020a60003504166305cbb85581146200017e5780631458f6fd14620001db57806319ad06db146200024757806320dfe7fb1462000288578063336989ae14620002f1578063355e6ce814620003305780633b3be49e146200041e5780633fad183414620004c85780634840b70514620004f257806360b00a4b146200050a5780636996abed146200052e57806375f63ed01462000555578063835331e114620005705780638894dd2b14620005a55780638b59243b14620005af5780638da5cb5b14620005c7578063918d407d14620005df5780639253efc61462000606578063995aed2c14620006725780639a4aecce14620006965780639b96eece14620006bd578063aa28611614620006e1578063aa6fb7ca1462000705578063b6083ade146200072c578063b7ad78cf1462000753578063b831c3f91462000789578063c9a3336c14620007c1578063dde96ff414620007f4578063ea27c89b14620005af575b600080fd5b3480156200018b57600080fd5b50620001996004356200081d565b60408051968752600160a060020a03958616602088015293851686850152919093166060850152608084019290925260a0830191909152519081900360c00190f35b348015620001e857600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855262000245958335600160a060020a03169536956044949193909101919081908401838280828437509497506200092e9650505050505050565b005b3480156200025457600080fd5b506200026c67ffffffffffffffff6004351662000ac9565b60408051600160a060020a039092168252519081900360200190f35b3480156200029557600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452620002459436949293602493928401919081908401838280828437509497505084359550505060208301359260400135915062000b6c9050565b348015620002fe57600080fd5b5062000315600160a060020a036004351662000efd565b60408051921515835260208301919091528051918290030190f35b3480156200033d57600080fd5b5062000354600160a060020a036004351662000f1c565b60408051891515815260208082018a9052600160a060020a0380891660608401528715156080840152861660a083015260c0820185905267ffffffffffffffff841660e083015261010092820183815289519383019390935288519192916101208401918a019080838360005b83811015620003db578181015183820152602001620003c1565b50505050905090810190601f168015620004095780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b3480156200042b57600080fd5b5062000442600160a060020a03600435166200100b565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200048b57818101518382015260200162000471565b50505050905090810190601f168015620004b95780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b348015620004d557600080fd5b50620004e0620010bd565b60408051918252519081900360200190f35b348015620004ff57600080fd5b50620004e06200113d565b3480156200051757600080fd5b50620004e0600160a060020a036004351662001144565b3480156200053b57600080fd5b506200026c600160a060020a0360043516602435620011c8565b3480156200056257600080fd5b506200035460043562001265565b3480156200057d57600080fd5b5062000588620012f7565b6040805167ffffffffffffffff9092168252519081900360200190f35b6200024562001307565b348015620005bc57600080fd5b50620004e06200139b565b348015620005d457600080fd5b506200026c620013a2565b348015620005ec57600080fd5b5062000245600435600160a060020a0360243516620013b1565b3480156200061357600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855262000245958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450620019a09350505050565b3480156200067f57600080fd5b50620004e0600160a060020a036004351662001f7b565b348015620006a357600080fd5b5062000245600160a060020a036004351660243562002010565b348015620006ca57600080fd5b50620004e0600160a060020a036004351662002236565b348015620006ee57600080fd5b5062000245600160a060020a0360043516620022cf565b3480156200071257600080fd5b506200026c600160a060020a036004351660243562002487565b3480156200073957600080fd5b5062000245600435600160a060020a036024351662002513565b3480156200076057600080fd5b5062000245600160a060020a0360043581169060243581169060443516606435608435620028da565b3480156200079657600080fd5b50620004e0600160a060020a0360043581169060243581169060443590606435906084351662002c67565b348015620007ce57600080fd5b50620004e0600160a060020a0360043581169060243581169060443516606435620038a9565b3480156200080157600080fd5b5062000245600160a060020a0360043516602435151562004155565b6000806000806000806007878154811015156200083657fe5b9060005260206000209060060201600001546007888154811015156200085857fe5b600091825260209091206001600690920201015460078054600160a060020a03909216918a9081106200088757fe5b600091825260209091206002600690920201015460078054600160a060020a03909216918b908110620008b657fe5b600091825260209091206003600690920201015460078054600160a060020a03909216918c908110620008e557fe5b90600052602060002090600602016004015460078c8154811015156200090757fe5b90600052602060002090600602016005015495509550955095509550955091939550919395565b600054600160a060020a031633146200094657600080fd5b600160a060020a038216600090815260026020526040902054829060ff161515620009aa576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260036020526040902054839060ff161562000a1e576040805160e560020a62461bcd02815260206004820152601960248201527f436f616c6974696f6e20616c7265616479206578697374732e00000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600360209081526040909120805460ff191660019081178255855162000a5b939290910191860190620048fd565b50505050600160a060020a031660008181526003602090815260408083206002908101805460018082018355918652848620018054600160a060020a031990811688179091558686529184529184206007018054928301815584529190922090910180549091169091179055565b336000818152600260205260408120549091829160ff16151562000b26576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b336000908152600260205260409020600601805467ffffffffffffffff861690811062000b4f57fe5b600091825260209091200154600160a060020a0316949350505050565b336000818152600260205260408120549091829182919060ff16151562000bcc576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b3360009081526002602052604090206003015460a060020a900460ff16151562000dd75762000bfb8862004465565b9350600092505b60095483101562000cb257600980548490811062000c1c57fe5b60009182526020909120015484141562000ca6576040805160e560020a62461bcd02815260206004820152602e60248201527f546f6b656e206e616d6520616c72656164792072656769737465726564206f7260448201527f206861736820636f6c6c69646564000000000000000000000000000000000000606482015290519081900360840190fd5b60019092019162000c02565b338888888862000cc16200497e565b8086600160a060020a0316600160a060020a0316815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101562000d2757818101518382015260200162000d0d565b50505050905090810190601f16801562000d555780820380516001836020036101000a031916815260200191505b509650505050505050604051809103906000f08015801562000d7b573d6000803e3d6000fd5b50336000908152600260205260409020600481018054600160a060020a038416600160a060020a0319909116179055600301805474ff0000000000000000000000000000000000000000191660a060020a179055915062000ef3565b6002600033600160a060020a0316600160a060020a0316815260200190815260200160002060040160009054906101000a9004600160a060020a0316600160a060020a0316632828fa0e898989896040518563ffffffff1660e060020a0281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101562000e8857818101518382015260200162000e6e565b50505050905090810190601f16801562000eb65780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801562000ed957600080fd5b505af115801562000eee573d6000803e3d6000fd5b505050505b5050505050505050565b6001602081905260009182526040909120805491015460ff9091169082565b600260208181526000928352604092839020805460018083015483860180548851601f6000199583161561010002959095019091169790970492830186900486028701860190975281865260ff909216959194929383018282801562000fc65780601f1062000f9a5761010080835404028352916020019162000fc6565b820191906000526020600020905b81548152906001019060200180831162000fa857829003601f168201915b505050506003830154600484015460058501546008909501549394600160a060020a038084169560a060020a90940460ff1694509091169167ffffffffffffffff1688565b6003602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f810186900486028301860190965285825260ff909216949293909290830182828015620010b35780601f106200108757610100808354040283529160200191620010b3565b820191906000526020600020905b8154815290600101906020018083116200109557829003601f168201915b5050505050905082565b3360008181526002602052604081205490919060ff16151562001119576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b3360009081526002602052604090206008015467ffffffffffffffff1691505b5090565b6201d1fa81565b600160a060020a038116600090815260026020526040812054829060ff161515620011a8576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b5050600160a060020a031660009081526002602052604090206007015490565b600160a060020a038216600090815260036020526040812054839060ff1615156200123d576040805160e560020a62461bcd02815260206004820152601860248201527f436f616c6974696f6e20646f65736e27742065786973742e0000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260036020526040902060020180548490811062000b4f57fe5b60058054829081106200127457fe5b6000918252602091829020600991909102018054600180830154600280850180546040805161010096831615969096026000190190911692909204601f810188900488028501880190925281845260ff9094169650909491929183018282801562000fc65780601f1062000f9a5761010080835404028352916020019162000fc6565b60045467ffffffffffffffff1681565b3360008181526002602052604090205460ff16151562001360576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b3360009081526002602052604090206005015462001385903463ffffffff6200453316565b3360009081526002602052604090206005015550565b6007545b90565b600054600160a060020a031681565b620013bb6200498f565b60008054819081908190600160a060020a03163314620013da57600080fd5b600160a060020a038616600090815260016020526040902054869060ff1615156200143e576040805160e560020a62461bcd028152602060048201526017602482015260008051602062005525833981519152604482015290519081900360640190fd5b600094505b6007548510156200150357876007868154811015156200145f57fe5b9060005260206000209060060201600001541415620014f75760078054869081106200148757fe5b60009182526020918290206040805160c0810182526006909302909101805483526001810154600160a060020a03908116948401949094526002810154841691830191909152600381015490921660608201526004820154608082015260059091015460a0820152955062001503565b60019094019362001443565b60075485106200154c576040805160e560020a62461bcd02815260206004820152600f602482015260008051602062005545833981519152604482015290519081900360640190fd5b876007868154811015156200155d57fe5b600091825260209091206006909102015414620015b3576040805160e560020a62461bcd02815260206004820152600f602482015260008051602062005545833981519152604482015290519081900360640190fd5b604080870151600160a060020a0390811660009081526002602090815283822060049081015460608c01518516845285842082015460a08d015187517f70a082310000000000000000000000000000000000000000000000000000000081528f88169481019490945296519186169a50909416975087936370a0823193602480840194938390030190829087803b1580156200164e57600080fd5b505af115801562001663573d6000803e3d6000fd5b505050506040513d60208110156200167a57600080fd5b50511015620016d3576040805160e560020a62461bcd02815260206004820152601860248201527f4e6f7420656e6f75676820746f6b656e7320746f206275790000000000000000604482015290519081900360640190fd5b82600160a060020a031663a3ffa9cd888860a001516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156200173b57600080fd5b505af115801562001750573d6000803e3d6000fd5b5050505083600160a060020a0316632e6f21368888608001516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015620017bc57600080fd5b505af1158015620017d1573d6000803e3d6000fd5b5050505082600160a060020a0316632e6f213687602001518860a001516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156200184157600080fd5b505af115801562001856573d6000803e3d6000fd5b505050506007858154811015156200186a57fe5b60009182526020822060069091020181815560018082018054600160a060020a031990811690915560028301805482169055600383018054909116905560048201839055600590910191909155850191505b60075482101562001980576007805483908110620018d657fe5b9060005260206000209060060201600760018403815481101515620018f757fe5b6000918252602090912082546006909202019081556001808301548183018054600160a060020a03928316600160a060020a031991821617909155600280860154908501805491841691831691909117905560038086015490850180549190931691161790556004808401549083015560059283015492909101919091559190910190620018bc565b600780549062001995906000198301620049c4565b505050505050505050565b600080548190600160a060020a03163314620019bb57600080fd5b600160a060020a038516600090815260026020526040902054859060ff161562001a2f576040805160e560020a62461bcd02815260206004820152601760248201527f436f6d70616e7920616c7265616479206578697374732e000000000000000000604482015290519081900360640190fd5b600160a060020a038616600090815260016020526040902054869060ff161562001aa3576040805160e560020a62461bcd02815260206004820152601860248201527f437573746f6d657220616c7265616479206578697374732e0000000000000000604482015290519081900360640190fd5b8460005b60085481101562001b2f57600880548290811062001ac157fe5b9060005260206000200154821415151562001b26576040805160e560020a62461bcd02815260206004820152601f60248201527f50686f6e65206e756d62657220616c7265616479207265676973746572656400604482015290519081900360640190fd5b60010162001aa7565b62001b3a8862004465565b9550600094505b600a5485101562001bf157600a80548690811062001b5b57fe5b60009182526020909120015486141562001be5576040805160e560020a62461bcd02815260206004820152603060248201527f436f6d70616e79206e616d6520616c726561647920726567697374657265642060448201527f6f72206861736820636f6c6c6964656400000000000000000000000000000000606482015290519081900360840190fd5b60019094019362001b41565b6004805467ffffffffffffffff198116600167ffffffffffffffff928316810190921617909155600160a060020a038a166000818152600260208181526040909220600381018054600160a060020a031916909417909355825460ff191690931782558a5162001c6a939290920191908b0190620048fd565b50600160a060020a0389166000908152600260208190526040822060018082018b81556008805480840182557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018d90558301805467ffffffffffffffff191690556005805480840180835591909652835460099096027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101805460ff909816151560ff1990981697909717875591547f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db183015583850180549196949562001d8a947f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db290940193919291821615610100026000190190911604620049f8565b50600382810180549183018054600160a060020a0319908116600160a060020a0394851617808355925460ff60a060020a918290041615150274ff00000000000000000000000000000000000000001990931692909217905560048085015490840180549092169216919091179055600580830154908201556006808301805462001e19928401919062004a72565b506007828101805462001e30928401919062004adb565b506008918201549101805467ffffffffffffffff191667ffffffffffffffff90921691909117905550600a805460018181019092557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801879055600160a060020a038a16600081815260026020818152604080842086835293819020860154815195865290850181905260609185018281529383018054968716156101000260001901909616929092049084018190527fe929302be229f1ab8de3c125262558e70e4a999bc561cacf3883baf4506ab81a948e949093909160808301908590801562001f605780601f1062001f345761010080835404028352916020019162001f60565b820191906000526020600020905b81548152906001019060200180831162001f4257829003601f168201915b505094505050505060405180910390a1505050505050505050565b600160a060020a038116600090815260036020526040812054829060ff16151562001ff0576040805160e560020a62461bcd02815260206004820152601860248201527f436f616c6974696f6e20646f65736e27742065786973742e0000000000000000604482015290519081900360640190fd5b5050600160a060020a031660009081526003602052604090206002015490565b600054600160a060020a031633146200202857600080fd5b600160a060020a038216600090815260016020526040902054829060ff16156200209c576040805160e560020a62461bcd02815260206004820152601860248201527f437573746f6d657220616c7265616479206578697374732e0000000000000000604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff161562002110576040805160e560020a62461bcd02815260206004820152601760248201527f436f6d70616e7920616c7265616479206578697374732e000000000000000000604482015290519081900360640190fd5b8260005b6008548110156200219c5760088054829081106200212e57fe5b9060005260206000200154821415151562002193576040805160e560020a62461bcd02815260206004820152601f60248201527f50686f6e65206e756d62657220616c7265616479207265676973746572656400604482015290519081900360640190fd5b60010162002114565b600160a060020a038616600081815260016020818152604092839020805460ff19168317815582018981556008805493840190557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909201899055905482519384529083015280517fa31b4bfd033d5cae9c587946556e517d5aa85b5faada12d103c00a702875ec9a9281900390910190a1505050505050565b604080517f27e235e30000000000000000000000000000000000000000000000000000000081523360048201529051600091600160a060020a038416916327e235e39160248082019260209290919082900301818787803b1580156200229b57600080fd5b505af1158015620022b0573d6000803e3d6000fd5b505050506040513d6020811015620022c757600080fd5b505192915050565b620022d962004b1e565b3360008181526002602052604090205460ff16151562002332576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b3360008181526003602052604090205460ff1615156200239c576040805160e560020a62461bcd02815260206004820152601860248201527f436f616c6974696f6e20646f65736e27742065786973742e0000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260026020526040902054849060ff16151562002400576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b50506040805160208082018352338252600160a060020a03958616600081815260028352938420600681018054600180820183559187529386209451949093018054600160a060020a031916949098169390931790965594909152600801805467ffffffffffffffff19811667ffffffffffffffff91821690950116939093179092555050565b600160a060020a038216600090815260026020526040812054839060ff161515620024eb576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b600160a060020a038416600090815260026020526040902060070180548490811062000b4f57fe5b600080548190600160a060020a031633146200252e57600080fd5b600091505b6007548210156200257a57836007838154811015156200254f57fe5b90600052602060002090600602016000015414156200256e576200257a565b60019091019062002533565b6007548210620025c3576040805160e560020a62461bcd02815260206004820152600f602482015260008051602062005545833981519152604482015290519081900360640190fd5b83600783815481101515620025d457fe5b6000918252602090912060069091020154146200262a576040805160e560020a62461bcd02815260206004820152600f602482015260008051602062005545833981519152604482015290519081900360640190fd5b82600160a060020a03166007838154811015156200264457fe5b6000918252602090912060016006909202010154600160a060020a031614620026b7576040805160e560020a62461bcd02815260206004820152601660248201527f44656c6574696e6720756e6f776e6564206f6666657200000000000000000000604482015290519081900360640190fd5b60026000600784815481101515620026cb57fe5b6000918252602080832060026006909302019190910154600160a060020a039081168452908301939093526040909101902060040154600780549190921691632e6f213691869190869081106200271e57fe5b9060005260206000209060060201600401546040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156200278357600080fd5b505af115801562002798573d6000803e3d6000fd5b50505050600782815481101515620027ac57fe5b60009182526020822060069091020181815560018082018054600160a060020a031990811690915560028301805482169055600383018054909116905560048201839055600590910191909155820190505b600754811015620028be5760078054829081106200281857fe5b90600052602060002090600602016007600183038154811015156200283957fe5b6000918252602090912082546006909202019081556001808301548183018054600160a060020a03928316600160a060020a0319918216179091556002808601549085018054918416918316919091179055600380860154908501805491909316911617905560048084015490830155600592830154929091019190915501620027fe565b6007805490620028d3906000198301620049c4565b5050505050565b620028e46200498f565b600054600160a060020a03163314620028fc57600080fd5b600160a060020a038616600090815260016020526040902054869060ff16151562002960576040805160e560020a62461bcd028152602060048201526017602482015260008051602062005525833981519152604482015290519081900360640190fd5b600160a060020a03808716600090815260026020908152604080832060049081015482517f70a082310000000000000000000000000000000000000000000000000000000081528d8716928101929092529151899592909216936370a082319360248084019491939192918390030190829087803b158015620029e257600080fd5b505af1158015620029f7573d6000803e3d6000fd5b505050506040513d602081101562002a0e57600080fd5b5051101562002a67576040805160e560020a62461bcd02815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320746f2073656c6c00000000000000604482015290519081900360640190fd5b6040805160c081018252600680548252600160a060020a038a811660208085018281528c84168688018181528d861660608901908152608089018e815260a08a018e8152600780546001808201835560009283528d517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688928e029283015597517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982018054600160a060020a0319908116928e1692909217905595517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a820180548816918d1691909117905593517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b85018054909616908b161790945590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68d9091015586549092019095559384526002905284832060049081015486517fa3ffa9cd00000000000000000000000000000000000000000000000000000000815291820192909252602481018a90529451939650169263a3ffa9cd926044808301939282900301818387803b15801562002c4557600080fd5b505af115801562002c5a573d6000803e3d6000fd5b5050505050505050505050565b600080548190819081908190600160a060020a0316331462002c8857600080fd5b600160a060020a038916600090815260016020526040902054899060ff16151562002cec576040805160e560020a62461bcd028152602060048201526017602482015260008051602062005525833981519152604482015290519081900360640190fd5b600160a060020a038b166000908152600260205260409020548b9060ff16151562002d50576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b5a600160a060020a03808e1660009081526002602052604090206004015491975016945088151562002eca5762002dfb85600160a060020a031663d3d1b0966040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562002dbf57600080fd5b505af115801562002dd4573d6000803e3d6000fd5b505050506040513d602081101562002deb57600080fd5b50518b9063ffffffff6200459516565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301528e81166024830152604482018490529151929b509087169163beabacc89160648082019260009290919082900301818387803b15801562002e7257600080fd5b505af115801562002e87573d6000803e3d6000fd5b505050600160a060020a03808d166000908152600160208181526040808420948b16845260029094019052919020805460ff191690911790555088965062003880565b88600260008a600160a060020a0316600160a060020a0316815260200190815260200160002060040160009054906101000a9004600160a060020a0316600160a060020a03166327e235e38d6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801562002f6257600080fd5b505af115801562002f77573d6000803e3d6000fd5b505050506040513d602081101562002f8e57600080fd5b5051101562002fe7576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f75676820626f6e757365730000000000000000000000000000604482015290519081900360640190fd5b87600160a060020a031685600160a060020a031663858f23c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200303057600080fd5b505af115801562003045573d6000803e3d6000fd5b505050506040513d60208110156200305c57600080fd5b5051600160a060020a03161415620031ac57620030ed85600160a060020a0316630d4830fc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620030b157600080fd5b505af1158015620030c6573d6000803e3d6000fd5b505050506040513d6020811015620030dd57600080fd5b50518a9063ffffffff6200459516565b9350620031028a601863ffffffff6200459516565b9950620031168a8563ffffffff6200453316565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a038e811660048301528f81166024830152604482018d90529151929c509087169163beabacc89160648082019260009290919082900301818387803b1580156200318d57600080fd5b505af1158015620031a2573d6000803e3d6000fd5b505050506200387c565b600160a060020a038c16600090815260026020818152604092839020835161014081018552815460ff161515815260018083015482850152828501805487516101009382161593909302600019011695909504601f81018590048502820185018752808252620035a29692959394928601939192830182828015620032755780601f10620032495761010080835404028352916020019162003275565b820191906000526020600020905b8154815290600101906020018083116200325757829003601f168201915b50505091835250506003820154600160a060020a0380821660208085019190915260a060020a90920460ff161515604080850191909152600485015490911660608401526005840154608084015260068401805482518185028101850190935280835260a090940193919290919060009084015b82821015620033255760008481526020908190206040805180840190915290840154600160a060020a03168152825260019092019101620032e9565b505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156200338857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162003369575b50505091835250506008919091015467ffffffffffffffff16602091820152600160a060020a038b1660009081526002808352604091829020825161014081018452815460ff16151581526001828101548287015282840180548651601f60001994831615610100029490940190911695909504918201879004870285018701865281855291959294860193928301828280156200346a5780601f106200343e576101008083540402835291602001916200346a565b820191906000526020600020905b8154815290600101906020018083116200344c57829003601f168201915b50505091835250506003820154600160a060020a0380821660208085019190915260a060020a90920460ff161515604080850191909152600485015490911660608401526005840154608084015260068401805482518185028101850190935280835260a090940193919290919060009084015b828210156200351a5760008481526020908190206040805180840190915290840154600160a060020a03168152825260019092019101620034de565b505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156200357d57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116200355e575b50505091835250506008919091015467ffffffffffffffff1660209091015262004608565b9250600160a060020a038316151562003605576040805160e560020a62461bcd02815260206004820152601560248201527f4e6f7420696e206f6e652063636f616c6974696f6e0000000000000000000000604482015290519081900360640190fd5b600160a060020a03808916600090815260026020908152604080832060049081015482517f9e65741e00000000000000000000000000000000000000000000000000000000815292516200367c969190911694639e65741e94848401949093908390030190829087803b158015620030b157600080fd5b9350620036fd85600160a060020a0316639e65741e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015620036c157600080fd5b505af1158015620036d6573d6000803e3d6000fd5b505050506040513d6020811015620036ed57600080fd5b5051859063ffffffff620046ca16565b93506200377e85600160a060020a0316630d4830fc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200374257600080fd5b505af115801562003757573d6000803e3d6000fd5b505050506040513d60208110156200376e57600080fd5b5051859063ffffffff6200459516565b9350620037938a601863ffffffff6200459516565b9950620037a78a8563ffffffff6200453316565b99506002600089600160a060020a0316600160a060020a0316815260200190815260200160002060040160009054906101000a9004600160a060020a0316600160a060020a031663beabacc88c8a8c6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b1580156200386257600080fd5b505af115801562003877573d6000803e3d6000fd5b505050505b8996505b6200388e8c5a880362004738565b15156200389a57600080fd5b50505050505095945050505050565b60008054819081908190600160a060020a03163314620038c857600080fd5b600160a060020a038816600090815260016020526040902054889060ff1615156200392c576040805160e560020a62461bcd028152602060048201526017602482015260008051602062005525833981519152604482015290519081900360640190fd5b600160a060020a038816600090815260026020526040902054889060ff16151562003990576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b600160a060020a038816600090815260026020526040902054889060ff161515620039f4576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b600260008b600160a060020a0316600160a060020a0316815260200190815260200160002060040160009054906101000a9004600160a060020a03169550600260008a600160a060020a0316600160a060020a0316815260200190815260200160002060040160009054906101000a9004600160a060020a031694508786600160a060020a03166327e235e38d6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801562003acd57600080fd5b505af115801562003ae2573d6000803e3d6000fd5b505050506040513d602081101562003af957600080fd5b5051101562003b52576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f75676820626f6e757365730000000000000000000000000000604482015290519081900360640190fd5b62003ee86002600088600160a060020a031663858f23c26040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562003b9957600080fd5b505af115801562003bae573d6000803e3d6000fd5b505050506040513d602081101562003bc557600080fd5b5051600160a060020a031681526020808201929092526040908101600020815161014081018352815460ff1615158152600180830154828601526002808401805486516101009482161594909402600019011691909104601f81018790048702830187018652808352929593948601939192909183018282801562003c8e5780601f1062003c625761010080835404028352916020019162003c8e565b820191906000526020600020905b81548152906001019060200180831162003c7057829003601f168201915b50505091835250506003820154600160a060020a0380821660208085019190915260a060020a90920460ff161515604080850191909152600485015490911660608401526005840154608084015260068401805482518185028101850190935280835260a090940193919290919060009084015b8282101562003d3e5760008481526020908190206040805180840190915290840154600160a060020a0316815282526001909201910162003d02565b5050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801562003da157602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162003d82575b50505091835250506008919091015467ffffffffffffffff16602091820152604080517f858f23c20000000000000000000000000000000000000000000000000000000081529051600292600092600160a060020a038c169263858f23c29260048084019391929182900301818787803b15801562003e1f57600080fd5b505af115801562003e34573d6000803e3d6000fd5b505050506040513d602081101562003e4b57600080fd5b5051600160a060020a031681526020808201929092526040908101600020815161014081018352815460ff1615158152600180830154828601526002808401805486516101009482161594909402600019011691909104601f8101879004870283018701865280835292959394860193919290918301828280156200346a5780601f106200343e576101008083540402835291602001916200346a565b9350600160a060020a038416151562003f4b576040805160e560020a62461bcd02815260206004820152601460248201527f4e6f7420696e206f6e6520636f616c6974696f6e000000000000000000000000604482015290519081900360640190fd5b62003fca86600160a060020a0316639e65741e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801562003f8e57600080fd5b505af115801562003fa3573d6000803e3d6000fd5b505050506040513d602081101562003fba57600080fd5b5051899063ffffffff6200459516565b96506200404b85600160a060020a0316639e65741e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200400f57600080fd5b505af115801562004024573d6000803e3d6000fd5b505050506040513d60208110156200403b57600080fd5b5051889063ffffffff620046ca16565b965085600160a060020a031663a3ffa9cd8c8a6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015620040b157600080fd5b505af1158015620040c6573d6000803e3d6000fd5b5050505084600160a060020a0316632e6f21368c896040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156200412e57600080fd5b505af115801562004143573d6000803e3d6000fd5b50505050505050505050949350505050565b336000818152600260205260408120549091829182919060ff161515620041b5576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b600091505b3360009081526002602052604090206006015482101562004230573360009081526002602052604090206006018054600160a060020a0388169190849081106200420057fe5b600091825260209091200154600160a060020a031614156200422457600193508192505b600190910190620041ba565b831515620042ae576040805160e560020a62461bcd02815260206004820152602d60248201527f596f7527726520747279696e6720746f2061736e7765722061206e6f6e65786960448201527f7374696e67207265717565737400000000000000000000000000000000000000606482015290519081900360840190fd5b84156200432057600160a060020a0386166000818152600360209081526040808320600290810180546001808201835591865284862001805433600160a060020a0319918216811790925590865291845291842060070180549283018155845291909220909101805490911690911790555b3360009081526002602052604090206006018054849081106200433f57fe5b60009182526020909120018054600160a060020a03191690556001830191505b3360009081526002602052604090206006015482101562004401573360009081526002602052604090206006018054839081106200439957fe5b6000918252602080832033845260029091526040909220600601805492909101916000198501908110620043c957fe5b60009182526020909120915491018054600160a060020a031916600160a060020a03909216919091179055600191909101906200435f565b3360009081526002602052604090206006018054600019019062004426908262004b30565b5050336000908152600260205260409020600801805467ffffffffffffffff19811667ffffffffffffffff918216600019019091161790555050505050565b6000816040516020018082805190602001908083835b602083106200449c5780518252601f1990920191602091820191016200447b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310620045015780518252601f199092019160209182019101620044e0565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912095945050505050565b818101828110156200458f576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c6964206164646974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b92915050565b818102821580620045b15750818382811515620045ae57fe5b04145b15156200458f576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c6964206d756c7469706c69636174696f6e00000000000000000000604482015290519081900360640190fd5b600080805b84610100015151821015620046bd575060005b83610100015151811015620046b1576101008401518051829081106200464257fe5b90602001906020020151600160a060020a0316856101000151838151811015156200466957fe5b90602001906020020151600160a060020a03161415620046a8576101008501518051839081106200469657fe5b906020019060200201519250620046c2565b60010162004620565b6001909101906200460d565b600092505b505092915050565b600080821162004724576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c6964206469766973696f6e00000000000000000000000000000000604482015290519081900360640190fd5b81838115156200473057fe5b049392505050565b600160a060020a0382166000908152600260205260408120548190849060ff1615156200479e576040805160e560020a62461bcd028152602060048201526016602482015260008051602062005565833981519152604482015290519081900360640190fd5b600160a060020a0385166000908152600260205260409020600501546201d1fa85013a029250821115620047d157600080fd5b60408051858152602081018490523a8183015290517ff1230fef891710629f824fd0ada7341852fac6dd646e312d622de38575ffa91b9181900360600190a1600160a060020a0385166000908152600260205260409020600501546200483e908363ffffffff6200489c16565b600160a060020a038087166000908152600260205260408082206005019390935580549251929091169184156108fc0291859190818181858888f1935050505015801562004890573d6000803e3d6000fd5b50600195945050505050565b600082821115620048f7576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964207375627472616374696f6e00000000000000000000000000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200494057805160ff191683800117855562004970565b8280016001018555821562004970579182015b828111156200497057825182559160200191906001019062004953565b506200113992915062004b57565b6040516109358062004bf083390190565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b815481835581811115620049f357600602816006028360005260206000209182019101620049f3919062004b74565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062004a33578054855562004970565b828001600101855582156200497057600052602060002091601f016020900482015b828111156200497057825482559160010191906001019062004a55565b82805482825590600052602060002090810192821562004acd5760005260206000209182015b8281111562004acd5782548254600160a060020a031916600160a060020a039091161782556001928301929091019062004a98565b506200113992915062004bc8565b82805482825590600052602060002090810192821562004acd5760005260206000209182015b8281111562004acd57825482559160010191906001019062004b01565b60408051602081019091526000815290565b815481835581811115620049f357600083815260209020620049f391810190830162004bc8565b6200139f91905b8082111562001139576000815560010162004b5e565b6200139f91905b8082111562001139576000808255600182018054600160a060020a031990811690915560028301805482169055600383018054909116905560048201819055600582015560060162004b7b565b6200139f91905b8082111562001139578054600160a060020a031916815560010162004bcf5600608060405234801561001057600080fd5b50604051610935380380610935833981016040908152815160208084015192840151606085015160808601516002805433600160a060020a03199182161790915560038054909116600160a060020a038716179055949095018051939590949193909261008291600191870190610097565b50600492909255600555600655506101329050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d857805160ff1916838001178555610105565b82800160010185558215610105579182015b828111156101055782518255916020019190600101906100ea565b50610111929150610115565b5090565b61012f91905b80821115610111576000815560010161011b565b90565b6107f4806101416000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be5780630d4830fc1461014857806327e235e31461016f5780632828fa0e146101905780632e6f2136146101f857806370a082311461021c578063858f23c21461023d5780638da5cb5b1461026e5780639e65741e14610283578063a3ffa9cd14610298578063beabacc8146102bc578063d3d1b096146102e6575b600080fd5b3480156100ca57600080fd5b506100d36102fb565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061015d610388565b60408051918252519081900360200190f35b34801561017b57600080fd5b5061015d600160a060020a036004351661038e565b34801561019c57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101f6943694929360249392840191908190840183828082843750949750508435955050506020830135926040013591506103a09050565b005b34801561020457600080fd5b506101f6600160a060020a03600435166024356103f1565b34801561022857600080fd5b5061015d600160a060020a0360043516610468565b34801561024957600080fd5b50610252610483565b60408051600160a060020a039092168252519081900360200190f35b34801561027a57600080fd5b50610252610492565b34801561028f57600080fd5b5061015d6104a1565b3480156102a457600080fd5b506101f6600160a060020a03600435166024356104a7565b3480156102c857600080fd5b506101f6600160a060020a03600435811690602435166044356104fe565b3480156102f257600080fd5b5061015d610638565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103805780601f1061035557610100808354040283529160200191610380565b820191906000526020600020905b81548152906001019060200180831161036357829003601f168201915b505050505081565b60055481565b60006020819052908152604090205481565b600254600160a060020a03163314806103c35750600354600160a060020a031633145b15156103ce57600080fd5b83516103e190600190602087019061072d565b5060049290925560055560065550565b600254600160a060020a03163314806104145750600354600160a060020a031633145b151561041f57600080fd5b600160a060020a038216600090815260208190526040902054610448908263ffffffff61063e16565b600160a060020a0390921660009081526020819052604090209190915550565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031681565b600254600160a060020a031681565b60065481565b600254600160a060020a03163314806104ca5750600354600160a060020a031633145b15156104d557600080fd5b600160a060020a038216600090815260208190526040902054610448908263ffffffff6106b616565b600254600160a060020a03163314806105215750600354600160a060020a031633145b151561052c57600080fd5b600354600160a060020a0384811691161480156105625750600354600160a060020a031660009081526020819052604090205481115b156105805760035461058090600160a060020a0316600283026103f1565b600160a060020a0383166000908152602081905260409020546105a9908263ffffffff6106b616565b600160a060020a0380851660009081526020819052604080822093909355908416815220546105de908263ffffffff61063e16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60045481565b818101828110156106b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c6964206164646974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b92915050565b60008282111561072757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c6964207375627472616374696f6e00000000000000000000000000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061076e57805160ff191683800117855561079b565b8280016001018555821561079b579182015b8281111561079b578251825591602001919060010190610780565b506107a79291506107ab565b5090565b6107c591905b808211156107a757600081556001016107b1565b905600a165627a7a72305820a92097d9fe3be63d34f9ab1da33a5cecdd8ab3e5c1c551fc0cf715a0aa62567e0029437573746f6d657220646f65736e27742065786973742e0000000000000000004f66666572206e6f7420666f756e640000000000000000000000000000000000436f6d70616e7920646f65736e27742065786973742e00000000000000000000a165627a7a723058208d925df881f5d8eae2f9202a064dce5c9e6e2554fd5ca47587a8ebc081d73f190029";

    protected Loyalty(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Loyalty(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AddCompanyEventResponse> getAddCompanyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddCompany", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddCompanyEventResponse> responses = new ArrayList<AddCompanyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCompanyEventResponse typedResponse = new AddCompanyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.companyAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.phoneNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddCompanyEventResponse> addCompanyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddCompany", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddCompanyEventResponse>() {
            @Override
            public AddCompanyEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddCompanyEventResponse typedResponse = new AddCompanyEventResponse();
                typedResponse.log = log;
                typedResponse.companyAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.phoneNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddCustomerEventResponse> getAddCustomerEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddCustomer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddCustomerEventResponse> responses = new ArrayList<AddCustomerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCustomerEventResponse typedResponse = new AddCustomerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddCustomerEventResponse> addCustomerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddCustomer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddCustomerEventResponse>() {
            @Override
            public AddCustomerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddCustomerEventResponse typedResponse = new AddCustomerEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LoggedInEventResponse> getLoggedInEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LoggedIn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LoggedInEventResponse> responses = new ArrayList<LoggedInEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LoggedInEventResponse typedResponse = new LoggedInEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LoggedInEventResponse> loggedInEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LoggedIn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LoggedInEventResponse>() {
            @Override
            public LoggedInEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LoggedInEventResponse typedResponse = new LoggedInEventResponse();
                typedResponse.log = log;
                typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Log", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogEventResponse> logEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Log", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogEventResponse>() {
            @Override
            public LogEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<DebugEventResponse> getDebugEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("debug", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<DebugEventResponse> responses = new ArrayList<DebugEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugEventResponse typedResponse = new DebugEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gas_A = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.total_eth = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<DebugEventResponse> debugEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("debug", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, DebugEventResponse>() {
            @Override
            public DebugEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                DebugEventResponse typedResponse = new DebugEventResponse();
                typedResponse.log = log;
                typedResponse.gas_A = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.total_eth = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Tuple6<BigInteger, String, String, String, BigInteger, BigInteger>> getOfferFromStock(BigInteger index) {
        final Function function = new Function("getOfferFromStock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<BigInteger, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<BigInteger, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addCoalition(String coalition, String _name) {
        final Function function = new Function(
                "addCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(coalition), 
                new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getRequestOnIndex(BigInteger index) {
        final Function function = new Function("getRequestOnIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setToken(String _name, BigInteger _inPrice, BigInteger _outPrice, BigInteger _exchangePrice) {
        final Function function = new Function(
                "setToken", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_inPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_outPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_exchangePrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<Boolean, BigInteger>> customers(String param0) {
        final Function function = new Function("customers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Int256>() {}));
        return new RemoteCall<Tuple2<Boolean, BigInteger>>(
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>> companies(String param0) {
        final Function function = new Function("companies", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>>(
                new Callable<Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<Boolean, String>> coalitions(String param0) {
        final Function function = new Function("coalitions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<Boolean, String>>(
                new Callable<Tuple2<Boolean, String>>() {
                    @Override
                    public Tuple2<Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getRequestCount() {
        final Function function = new Function("getRequestCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> transferBonuses_transaction_cost() {
        final Function function = new Function("transferBonuses_transaction_cost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getCompanyCoalitionCount(String company) {
        final Function function = new Function("getCompanyCoalitionCount", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getCoalitionMember(String coalition, BigInteger index) {
        final Function function = new Function("getCoalitionMember", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(coalition), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>> companySet(BigInteger param0) {
        final Function function = new Function("companySet", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>>(
                new Callable<Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Boolean, BigInteger, String, String, Boolean, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> companiesCount() {
        final Function function = new Function("companiesCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addEther(BigInteger weiValue) {
        final Function function = new Function(
                "addEther", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> getStockSize() {
        final Function function = new Function("getStockSize", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> acceptOffer(BigInteger id, String acceptor) {
        final Function function = new Function(
                "acceptOffer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Address(acceptor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCompany(String company, String _name, BigInteger _phoneNumber) {
        final Function function = new Function(
                "addCompany", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Int256(_phoneNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getCoalitionSize(String coalition) {
        final Function function = new Function("getCoalitionSize", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(coalition)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addCustomer(String customer, BigInteger _phoneNumber) {
        final Function function = new Function(
                "addCustomer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.generated.Int256(_phoneNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getBalanceOf(String token) {
        final Function function = new Function("getBalanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> inviteToCoalition(String company) {
        final Function function = new Function(
                "inviteToCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getCompanyCoalition(String company, BigInteger index) {
        final Function function = new Function("getCompanyCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> recallOffer(BigInteger id, String acceptor) {
        final Function function = new Function(
                "recallOffer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.Address(acceptor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> placeCustomerOffer(String customer, String sellTokenCompany, String wantedTokenCompany, BigInteger sellAmount, BigInteger buyAmount) {
        final Function function = new Function(
                "placeCustomerOffer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.Address(sellTokenCompany), 
                new org.web3j.abi.datatypes.Address(wantedTokenCompany), 
                new org.web3j.abi.datatypes.generated.Uint256(sellAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(buyAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferBonuses(String company, String customer, BigInteger roublesAmount, BigInteger bonusesAmount, String tokenOwner) {
        final Function function = new Function(
                "transferBonuses", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.generated.Uint256(roublesAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(bonusesAmount), 
                new org.web3j.abi.datatypes.Address(tokenOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> exchangeToken(String customer, String tokenOwner1, String tokenOwner2, BigInteger amount) {
        final Function function = new Function(
                "exchangeToken", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.Address(tokenOwner1), 
                new org.web3j.abi.datatypes.Address(tokenOwner2), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respond(String request_sender, Boolean answer) {
        final Function function = new Function(
                "respond", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(request_sender), 
                new org.web3j.abi.datatypes.Bool(answer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getStockSize1() {
        final Function function = new Function("getStockSize1", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Loyalty> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loyalty.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Loyalty> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loyalty.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Loyalty load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loyalty(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Loyalty load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loyalty(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddCompanyEventResponse {
        public Log log;

        public String companyAddress;

        public String name;

        public BigInteger phoneNumber;
    }

    public static class AddCustomerEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger number;
    }

    public static class LoggedInEventResponse {
        public Log log;

        public String _address;

        public BigInteger number;
    }

    public static class LogEventResponse {
        public Log log;

        public String _address;
    }

    public static class DebugEventResponse {
        public Log log;

        public BigInteger gas_A;

        public BigInteger total_eth;

        public BigInteger price;
    }
}
